# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # Error Rules
    avoid_returning_null_for_future: true # Avoid returning null for Future.
    avoid_type_to_string: true # Avoid .toString() in production code since results may be minified
    cancel_subscriptions: true # Cancel instances of dart.async.StreamSubscription
    close_sinks: true # Close instances of dart.core.Sink
    # Style Rules
    always_declare_return_types: true # Declare method return types
    avoid_multiple_declarations_per_line: true # Don't declare multiple variables on a single line
    avoid_positional_boolean_parameters: true # Avoid positional boolean parameters
    avoid_unused_constructor_parameters: true # Avoid defining unused parameters in constructors
    avoid_void_async: true # Avoid async functions that return void
    directives_ordering: true # Adhere to Effective Dart Guide directives sorting conventions
    eol_at_end_of_file: true # Put a single newline at end of file
    prefer_null_aware_method_calls: true # Prefer null aware method calls
    prefer_single_quotes: true  # Only use double quotes for strings containing single quotes
    require_trailing_commas: true # DO use trailing commas for all function calls and declarations unless the function call or definition, from the start of the function name up to the closing parenthesis, fits in a single line.
    sort_child_properties_last: true # Sort child properties last in widget instance creations
    sort_unnamed_constructors_first: true # DO sort unnamed constructor declarations first, before named ones
    type_annotate_public_apis: true # Type annotate public APIs
    unnecessary_await_in_return: true # Unnecessary await keyword in return
    # We commented out this rule because it doesn't work well with dynamic types (works without implicit conversion).
    # unnecessary_lambdas: true # Don't create a lambda when a tear-off will do
    unnecessary_lambdas: false # Don't create a lambda when a tear-off will do
    sort_pub_dependencies: true # Sort pub dependencies

analyzer:
  errors:
    avoid_returning_null_for_future: error
    avoid_unnecessary_containers: error
    cancel_subscriptions: error
    close_sinks: error
    always_declare_return_types: error
    avoid_multiple_declarations_per_line: error
    avoid_positional_boolean_parameters: error
    avoid_unused_constructor_parameters: error
    avoid_void_async: error
    prefer_single_quotes: error
    sort_child_properties_last: error
    sort_unnamed_constructors_first: error
    type_annotate_public_apis: error
    unnecessary_await_in_return: error
    unnecessary_lambdas: error
    sort_pub_dependencies: error
    missing_required_param: error
    missing_return: error
    parameter_assignments: error
    prefer_const_constructors: error
    sized_box_for_whitespace: error

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
